{"version":3,"sources":["generated/AllGenerated.ts","generated/DiscBuildingQueueResponse.ts","generated/DiscProductionPercentagesRequest.ts","generated/DiscStorageResponse.ts","generated/DiscGeneralRequest.ts","generated/DiscLoginResponse.ts","generated/DiscBuildingsListRequest.ts","generated/DiscBuildingsListResponse.ts","generated/DiscBuildingQueueRequest.ts","generated/DiscOnPlanetRequest.ts","generated/DiscRegisterRequest.ts","generated/DiscProductionInformationResponse.ts","generated/DiscProductionPercentagesResponse.ts","generated/DiscLoginRequest.ts","generated/DiscProductionInformationRequest.ts","generated/DiscStorageRequest.ts","generated/DiscBuildRequest.ts","Store.ts","reportWebVitals.ts","Actions.ts","Reducers.ts","LoginForm.tsx","Login.tsx","Menu.tsx","ResourcesView.tsx","Utility.ts","Knowledge.ts","BuildingEntry.tsx","BuildingsPage.tsx","ResourcesPage.tsx","DependencyTreePage.tsx","IngameSwitch.tsx","Ingame.tsx","Page.tsx","OnPlanetRequestBuilder.ts","RouterMiddleware.ts","WasmRouterConnectivity.ts","middlewares/InGamePageProcedures.ts","Configuration.ts","index.tsx","middlewares/LoginPageProcedures.ts"],"names":["BUILDING_QUEUE_RESPONSE","PRODUCTION_PERCENTAGES_REQUEST","STORAGE_RESPONSE","GENERAL_REQUEST","LOGIN_RESPONSE","BUILDINGS_LIST_REQUEST","BUILDINGS_LIST_RESPONSE","BUILDING_QUEUE_REQUEST","ON_PLANET_REQUEST","REGISTER_REQUEST","PRODUCTION_INFORMATION_RESPONSE","PRODUCTION_PERCENTAGES_RESPONSE","LOGIN_REQUEST","PRODUCTION_INFORMATION_REQUEST","STORAGE_REQUEST","BUILD_REQUEST","LoginState","RegisterState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","registerRequest","createAction","registerSuccessful","loginRequest","loginSucceeded","loadOverviewPage","loadBuildingsPage","loadResourcesPage","loadDependencyTreePage","startBuilding","contextUpdated","overviewLoaded","dependencyTreeLoaded","buildingsLoaded","resourcesLoaded","refreshPage","secondElapsed","DEFAULT_LOGIN_FIELDS","DEFAULT_LOGIN_FORM_STATE","none","OVERVIEW_PAGE","BUILDINGS_PAGE","RESOURCES_PAGE","DEPENDENCY_TREE_PAGE","LOGIN_PAGE","INGAME_PAGE","getEmptyContextWithChosen","chosenPlanet","planetList","actualPlanetStorage","metal","crystal","deuter","lastUpdatedAt","buildings","undefined","researchs","DEFAULT_STORE_STATE","page","type","loginForm","getLoginPageState","store","getIngamePageState","getLoginFormState","getChosenPlanet","contextData","getBuildings","getResearchs","getBuildingQueue","innerPage","queue","reduceSecond","state","timeToFinish","combinedReducer","action","match","loginState","requested","payload","registerState","successful","storage","production","LoginForm","props","fields","name","onChange","this","setLogin","bind","setPasscode","value","disabled","onClick","loginClick","registerClick","event","login","target","passcode","onLoginClick","onRegisterClick","React","Component","connect","dispatch","Login","Menu","onOverviewClick","planet","onBuildingsClick","onResourcesClick","onDependencyTreeClick","className","id","ResourcesView","resources","prettyName","camelCase","toUpperCase","substring","join","knowledge","secondsToTimeLeft","rawSeconds","seconds","minutes","hours","fillZeros","num","BuildingEntry","align","buildingInfo","getBuildButtonField","cost","level","calc","init","multiplier","Math","floor","pow","know","buildingCosts","find","elem","energy","calculateCost","buildingName","onBuildClick","getBuildTimer","getBuildButton","timeLeft","building","buildingsOrder","metalMine","crystalMine","deuteriumSynthesizer","solarPlant","fusionReactor","roboticsFactory","naniteFactory","shipyard","metalStorage","crystalStorage","deuteriumTank","researchLab","terraformer","alianceDepot","missileSilo","buildingsOrderPred","lhs","rhs","BuildingsPage","console","log","obj","Object","keys","map","key","sort","filter","areRequirementsSatisfied","getBuildingEntry","entity","requirementList","requirements","req","every","EMPTY_PROD","ideal","actual","alwaysIdeal","prod","makeProd","ProductionEntry","formatProduction","percentage","defaultProps","ResourcesPage","productions","baseMetal","baseCrystal","percentages","metalMineGeneration","metalMineIdealGeneration","metalMineEnergyUsage","crystalMineGeneration","crystalMineIdealGeneration","crystalMineEnergyUsage","deuteriumSynthesizerGeneration","deuteriumSynthesizerIdealGeneration","deuteriumSynthesizerEnergyUsage","solarPlantGeneration","fusionReactorDeuterUsage","solarSateliteGeneration","fusionReactorGeneration","renderRequirement","renderSingleReq","r","DependencyTreePage","IngameSwitch","pageType","Ingame","Page","actualPage","OnPlanetRequestBuilder","player","msg","playerId","queries","query","push","data","pick","typename","resp","Error","NO_RESEARCHS","energyTechnology","computerTechnology","espionageTechnology","laserTechnology","hyperspaceDrive","hyperspaceTechnology","ionTechnology","intergalacticResearchNetwork","armourTechnology","shieldingTechnology","combustionDrive","impulseDrive","gravitonTechnology","weaponsTechnology","plasmaTechnology","pickContext","RouterMiddleware","backend","onPlanet","addContext","addQuery","onPlanetRequest","context","buildingQueue","response","status","productionInformation","asGeneralRequest","module","makeBackend","window","__forwardTime","duration","forwardTime","__clearDb","clearDb","request","processRequest","transactionId","result","inputStr","JSON","stringify","inputMem","_malloc","length","writeAsciiToMemory","outputMem","outputStr","AsciiToString","_free","Promise","resolve","FileSystem","syncfs","err","parse","middleware","RouterConnectivity","credentials","generalRequest","overview","buildingsView","queryProduction","refreshContext","conn","configuration","createStore","composeWithDevTools","applyMiddleware","next","updateContext","getContextUpdated","updateBuildings","getPlanet","getState","beginBuilding","chooseRefreshAction","shouldRefreshDueToDone","tryLogin","planets","tryRegister","getLoginMiddleware","realTime","setInterval","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6de4cca8.chunk.js","sourcesContent":["export * from \"./StorageRequest\"\nexport * from \"./DiscBuildingQueueResponse\"\nexport * from \"./SerializableResponse\"\nexport * from \"./ProductionInformation\"\nexport * from \"./OnPlanetResponseData\"\nexport * from \"./Timestamp\"\nexport * from \"./Researchs\"\nexport * from \"./BuildingsListResponse\"\nexport * from \"./TimeForwardRequest\"\nexport * from \"./OnPlanetRequest\"\nexport * from \"./BuildingsViewResponse\"\nexport * from \"./Storage\"\nexport * from \"./Buildings\"\nexport * from \"./ProductionPercentagesResponse\"\nexport * from \"./DiscRegisterResponse\"\nexport * from \"./BaseProduction\"\nexport * from \"./TimeForwardResponse\"\nexport * from \"./RndRequestData\"\nexport * from \"./RefreshContextRequest\"\nexport * from \"./BigNum\"\nexport * from \"./RequirementsForBuilding\"\nexport * from \"./ProductionInformationViewRequest\"\nexport * from \"./ProductionInformationViewResponse\"\nexport * from \"./StartBuildingActionResponse\"\nexport * from \"./RndResponseData\"\nexport * from \"./DiscTimeForwardRequest\"\nexport * from \"./DiscProductionPercentagesRequest\"\nexport * from \"./DiscClearDatabaseRequest\"\nexport * from \"./RefreshContextResponse\"\nexport * from \"./OnPlanetAction\"\nexport * from \"./OverviewViewResponse\"\nexport * from \"./Status\"\nexport * from \"./DiscStorageResponse\"\nexport * from \"./DiscGeneralRequest\"\nexport * from \"./DiscGeneralResponse\"\nexport * from \"./DiscLoginResponse\"\nexport * from \"./Building\"\nexport * from \"./BuildingCost\"\nexport * from \"./BuildingsViewRequest\"\nexport * from \"./ClearDatabaseResponse\"\nexport * from \"./ResearchRequirement\"\nexport * from \"./ProductionInformationResponse\"\nexport * from \"./UserCredentials\"\nexport * from \"./OnPlanetQuery\"\nexport * from \"./ChangePercentageUsageActionResponse\"\nexport * from \"./DiscBuildingsListRequest\"\nexport * from \"./GeneralResponseData\"\nexport * from \"./BuildingsListRequest\"\nexport * from \"./Cost\"\nexport * from \"./RndResponse\"\nexport * from \"./BaseProductions\"\nexport * from \"./StorageResponse\"\nexport * from \"./RegisterRequest\"\nexport * from \"./PlanetLocation\"\nexport * from \"./RequirementsForResearch\"\nexport * from \"./DiscBuildingsListResponse\"\nexport * from \"./Requirements\"\nexport * from \"./Knowledge\"\nexport * from \"./SerializableRequest\"\nexport * from \"./DiscBuildingQueueRequest\"\nexport * from \"./DiscRndResponse\"\nexport * from \"./DiscTimeForwardResponse\"\nexport * from \"./LoginResponse\"\nexport * from \"./ProductionPercentages\"\nexport * from \"./GeneralResponse\"\nexport * from \"./BuildingQueueEntry\"\nexport * from \"./AllRequirements\"\nexport * from \"./DiscRndRequest\"\nexport * from \"./OnPlanetResponse\"\nexport * from \"./GeneralRequest\"\nexport * from \"./OverviewViewRequest\"\nexport * from \"./DiscOnPlanetRequest\"\nexport * from \"./Research\"\nexport * from \"./LoginRequest\"\nexport * from \"./DiscRegisterRequest\"\nexport * from \"./GeneralContext\"\nexport * from \"./DiscProductionInformationResponse\"\nexport * from \"./PlayerId\"\nexport * from \"./BuildingRequirement\"\nexport * from \"./RegisterResponse\"\nexport * from \"./DiscProductionPercentagesResponse\"\nexport * from \"./ChangePercentageUsageActionRequest\"\nexport * from \"./StartBuildingActionRequest\"\nexport * from \"./Configuration\"\nexport * from \"./DiscOnPlanetResponse\"\nexport * from \"./RndRequest\"\nexport * from \"./GeneralRequestData\"\nexport * from \"./DiscClearDatabaseResponse\"\nexport * from \"./Duration\"\nexport * from \"./DiscLoginRequest\"\nexport * from \"./DiscProductionInformationRequest\"\nexport * from \"./ClearDatabaseRequest\"\nexport * from \"./ProductionInformationRequest\"\nexport * from \"./ProductionPercentagesRequest\"\nexport * from \"./BuildingQueueRequest\"\nexport * from \"./BuildRequest\"\nexport * from \"./BuildResponse\"\nexport * from \"./CachedProduction\"\nexport * from \"./DiscBuildResponse\"\nexport * from \"./DiscStorageRequest\"\nexport * from \"./DiscBuildRequest\"\nexport * from \"./BuildingQueueResponse\"\n","import {BuildingQueueResponse} from \"./BuildingQueueResponse\"\n\nexport const BUILDING_QUEUE_RESPONSE = \"BuildingQueueResponse\";\n\nexport type DiscBuildingQueueResponse = {\n\ttype : typeof BUILDING_QUEUE_RESPONSE\n\tdata : BuildingQueueResponse\n}","import {ProductionPercentagesRequest} from \"./ProductionPercentagesRequest\"\n\nexport const PRODUCTION_PERCENTAGES_REQUEST = \"ProductionPercentagesRequest\";\n\nexport type DiscProductionPercentagesRequest = {\n\ttype : typeof PRODUCTION_PERCENTAGES_REQUEST\n\tdata : ProductionPercentagesRequest\n}","import {StorageResponse} from \"./StorageResponse\"\n\nexport const STORAGE_RESPONSE = \"StorageResponse\";\n\nexport type DiscStorageResponse = {\n\ttype : typeof STORAGE_RESPONSE\n\tdata : StorageResponse\n}","import {GeneralRequest} from \"./GeneralRequest\"\n\nexport const GENERAL_REQUEST = \"GeneralRequest\";\n\nexport type DiscGeneralRequest = {\n\ttype : typeof GENERAL_REQUEST\n\tdata : GeneralRequest\n}","import {LoginResponse} from \"./LoginResponse\"\n\nexport const LOGIN_RESPONSE = \"LoginResponse\";\n\nexport type DiscLoginResponse = {\n\ttype : typeof LOGIN_RESPONSE\n\tdata : LoginResponse\n}","import {BuildingsListRequest} from \"./BuildingsListRequest\"\n\nexport const BUILDINGS_LIST_REQUEST = \"BuildingsListRequest\";\n\nexport type DiscBuildingsListRequest = {\n\ttype : typeof BUILDINGS_LIST_REQUEST\n\tdata : BuildingsListRequest\n}","import {BuildingsListResponse} from \"./BuildingsListResponse\"\n\nexport const BUILDINGS_LIST_RESPONSE = \"BuildingsListResponse\";\n\nexport type DiscBuildingsListResponse = {\n\ttype : typeof BUILDINGS_LIST_RESPONSE\n\tdata : BuildingsListResponse\n}","import {BuildingQueueRequest} from \"./BuildingQueueRequest\"\n\nexport const BUILDING_QUEUE_REQUEST = \"BuildingQueueRequest\";\n\nexport type DiscBuildingQueueRequest = {\n\ttype : typeof BUILDING_QUEUE_REQUEST\n\tdata : BuildingQueueRequest\n}","import {OnPlanetRequest} from \"./OnPlanetRequest\"\n\nexport const ON_PLANET_REQUEST = \"OnPlanetRequest\";\n\nexport type DiscOnPlanetRequest = {\n\ttype : typeof ON_PLANET_REQUEST\n\tdata : OnPlanetRequest\n}","import {RegisterRequest} from \"./RegisterRequest\"\n\nexport const REGISTER_REQUEST = \"RegisterRequest\";\n\nexport type DiscRegisterRequest = {\n\ttype : typeof REGISTER_REQUEST\n\tdata : RegisterRequest\n}","import {ProductionInformationResponse} from \"./ProductionInformationResponse\"\n\nexport const PRODUCTION_INFORMATION_RESPONSE = \"ProductionInformationResponse\";\n\nexport type DiscProductionInformationResponse = {\n\ttype : typeof PRODUCTION_INFORMATION_RESPONSE\n\tdata : ProductionInformationResponse\n}","import {ProductionPercentagesResponse} from \"./ProductionPercentagesResponse\"\n\nexport const PRODUCTION_PERCENTAGES_RESPONSE = \"ProductionPercentagesResponse\";\n\nexport type DiscProductionPercentagesResponse = {\n\ttype : typeof PRODUCTION_PERCENTAGES_RESPONSE\n\tdata : ProductionPercentagesResponse\n}","import {LoginRequest} from \"./LoginRequest\"\n\nexport const LOGIN_REQUEST = \"LoginRequest\";\n\nexport type DiscLoginRequest = {\n\ttype : typeof LOGIN_REQUEST\n\tdata : LoginRequest\n}","import {ProductionInformationRequest} from \"./ProductionInformationRequest\"\n\nexport const PRODUCTION_INFORMATION_REQUEST = \"ProductionInformationRequest\";\n\nexport type DiscProductionInformationRequest = {\n\ttype : typeof PRODUCTION_INFORMATION_REQUEST\n\tdata : ProductionInformationRequest\n}","import {StorageRequest} from \"./StorageRequest\"\n\nexport const STORAGE_REQUEST = \"StorageRequest\";\n\nexport type DiscStorageRequest = {\n\ttype : typeof STORAGE_REQUEST\n\tdata : StorageRequest\n}","import {BuildRequest} from \"./BuildRequest\"\n\nexport const BUILD_REQUEST = \"BuildRequest\";\n\nexport type DiscBuildRequest = {\n\ttype : typeof BUILD_REQUEST\n\tdata : BuildRequest\n}","import {Buildings,\n        Storage,\n        PlanetLocation,\n        UserCredentials,\n        BuildingQueueResponse,\n        ProductionInformation,\n        Researchs } from \"./generated/AllGenerated\"\n\n\nexport enum LoginState\n{\n    none = 0,\n    requested = 1,\n    successful = 2\n}\n\nexport enum RegisterState\n{\n    none = 0,\n    requested = 1,\n    successful = 2\n}\n\nexport type LoginFormState = \n{\n    loginState: LoginState\n    registerState: RegisterState\n    loginFields: UserCredentials\n}\n\nexport const DEFAULT_LOGIN_FIELDS : UserCredentials = {\n    'login': \"\",\n    \"passcode\": \"\"\n}\n\nexport const DEFAULT_LOGIN_FORM_STATE : LoginFormState = {\n    'loginState' : LoginState.none,\n    'registerState' : RegisterState.none,\n    'loginFields': DEFAULT_LOGIN_FIELDS\n};\n\nexport const OVERVIEW_PAGE = \"OVERVIEW_PAGE\";\nexport const BUILDINGS_PAGE = \"BUILDINGS_PAGE\";\nexport const RESOURCES_PAGE = \"RESOURCES_PAGE\";\nexport const DEPENDENCY_TREE_PAGE = \"DEPENDENCY_TREE_PAGE\";\nexport const LOGIN_PAGE = \"LOGIN_PAGE\";\nexport const INGAME_PAGE = \"INGAME_PAGE\";\n\n\nexport type ContextData = \n{\n    planetList: Array<PlanetLocation>,\n    chosenPlanet: PlanetLocation,\n    actualPlanetStorage: Storage,\n    buildings: Buildings,\n    researchs: Researchs\n}\n\nexport const EMPTY_CONTEXT_DATA : ContextData = \n{\n    planetList: [],\n    chosenPlanet: { position: 0, galaxy: 0, solar: 0 },\n    actualPlanetStorage: { metal: 0, crystal: 0, deuter: 0, lastUpdatedAt: 0},\n    buildings: undefined as unknown as Buildings,\n    researchs: undefined as unknown as Researchs\n}\n\nexport function getEmptyContextWithChosen(chosenPlanet: PlanetLocation) : ContextData\n{\n    return {\n        planetList: [chosenPlanet],\n        chosenPlanet: chosenPlanet,\n        actualPlanetStorage: {metal: 0, crystal: 0, deuter: 0, lastUpdatedAt: 0},\n        buildings: undefined as unknown as Buildings,\n        researchs: undefined as unknown as Researchs\n    }\n}\n\nexport type OverviewPageState = \n{\n    type: typeof OVERVIEW_PAGE\n}\n\nexport type BuildingsPageState =\n{\n    type: typeof BUILDINGS_PAGE\n    queue: BuildingQueueResponse[\"queue\"]\n}\n\nexport type ResourcesPageState =\n{\n    type: typeof RESOURCES_PAGE\n    production: ProductionInformation\n}\n\nexport type DependencyTreePageState =\n{\n    type: typeof DEPENDENCY_TREE_PAGE\n}\n\nexport type IngameInnerPageState = OverviewPageState | BuildingsPageState | ResourcesPageState | DependencyTreePageState;\n\nexport type LoginPageState =\n{\n    type: typeof LOGIN_PAGE\n    loginForm: LoginFormState\n};\n\nexport type IngamePageState =\n{\n    type: typeof INGAME_PAGE\n    innerPage: IngameInnerPageState\n    contextData: ContextData\n}\n\nexport type PageState = LoginPageState | IngamePageState;\n\nexport interface Store\n{\n    page: PageState\n}\n\nexport const DEFAULT_STORE_STATE : Store = {\n    page: {\n        type: LOGIN_PAGE,\n        loginForm: DEFAULT_LOGIN_FORM_STATE\n    }\n}\n\nexport function getPageState(store: Store) : PageState\n{\n    return store.page;\n}\n\nexport function getLoginPageState(store: Store) : LoginPageState\n{\n    return store.page as LoginPageState;\n}\n\nexport function getIngamePageState(store: Store) : IngamePageState\n{\n    return store.page as IngamePageState;\n}\n\nexport function getLoginFormState(store: Store) : LoginFormState\n{\n    return getLoginPageState(store).loginForm;\n}\n\nexport function getLoginState(store: Store) : LoginState\n{\n    return getLoginFormState(store).loginState;\n}\n\nexport function getRegisterState(store: Store) : RegisterState\n{\n    return getLoginFormState(store).registerState;\n}\n\nexport function getLoginFields(store: Store) : UserCredentials\n{\n    return getLoginFormState(store).loginFields;\n}\n\nexport function getActualPlanetStorage(store: Store) : Storage\n{\n    return getIngamePageState(store).contextData.actualPlanetStorage;\n}\n\nexport function getChosenPlanet(store: Store) : PlanetLocation\n{\n    return getIngamePageState(store).contextData.chosenPlanet;\n}\n\nexport function getBuildings(store: Store) : Buildings\n{\n    return getIngamePageState(store).contextData.buildings;\n}\n\nexport function getResearchs(store: Store) : Researchs\n{\n    return getIngamePageState(store).contextData.researchs;\n}\n\nexport function getBuildingQueue(store: Store)\n{\n    return (getIngamePageState(store).innerPage as BuildingsPageState).queue;\n}\n\nexport function getTotalProduction(store: Store)\n{\n    return (getIngamePageState(store).innerPage as ResourcesPageState).production;\n}\n\nexport function shouldRefreshDueToDone(store: Store)\n{\n  if(store.page.type === INGAME_PAGE)\n  {\n    if(store.page.innerPage.type === BUILDINGS_PAGE)\n    {\n      if(store.page.innerPage.queue)\n      {\n        if(store.page.innerPage.queue.timeToFinish < 1)\n        {\n            return true;\n        }\n      }\n    }\n  }\n  return false;\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createAction} from \"@reduxjs/toolkit\"\n\nimport { UserCredentials,\n         PlanetLocation,\n         GeneralContext,\n         Building,\n         BuildingQueueResponse,\n        ProductionInformation } from \"./generated/AllGenerated\"\n\nexport const LOGIN_SUBMIT = \"LOGIN_SUBMIT\"\nexport const LOGIN_SUCCESSFUL = \"LOGIN_SUCCESSFUL\"\nexport const REGISTER_SUBMIT = \"REGISTER_SUBMIT\"\nexport const REGISTER_SUCCESSFUL = \"REGISTER_SUCCESSFUL\"\nexport const BUILDINGS_CLICKED = \"BUILDINGS_CLICKED\"\n\nexport type PlanetPayload = \n{\n    planet: PlanetLocation\n}\n\nexport type BuildingPayload =\n{\n    building: Building\n}\n\nexport type BuildingsLoadedPayload = \n{\n    queue: BuildingQueueResponse[\"queue\"]\n}\n\nexport type ChosenPlanetPayload =\n{\n    chosenPlanet: PlanetLocation\n}\n\nexport type DependenciesPayload =\n{\n}\n\nexport const registerRequest = createAction<UserCredentials>(\"login/registerRequest\");\nexport const registerSuccessful = createAction(\"login/registerSuccessful\");\nexport const loginRequest = createAction<UserCredentials>(\"login/loginRequest\");\nexport const loginSucceeded = createAction<ChosenPlanetPayload>(\"login/succeeded\");\nexport const loadOverviewPage = createAction<PlanetPayload>(\"ingame/overviewPage\");\nexport const loadBuildingsPage = createAction<PlanetPayload>(\"ingame/buildingsPage\");\nexport const loadResourcesPage = createAction<PlanetPayload>(\"ingame/resourcesPage\");\nexport const loadDependencyTreePage = createAction<PlanetPayload>(\"ingame/dependencyTreePage\");\nexport const startBuilding = createAction<BuildingPayload>(\"ingame/startBuilding\");\nexport const contextUpdated = createAction<GeneralContext>(\"ingame/contextUpdated\");\nexport const overviewLoaded = createAction(\"ingame/overviewLoaded\");\nexport const dependencyTreeLoaded = createAction<DependenciesPayload>(\"ingame/dependencyTreeLoaded\");\nexport const buildingsLoaded = createAction<BuildingsLoadedPayload>(\"ingame/buildingsLoaded\");\nexport const resourcesLoaded = createAction<ProductionInformation>(\"ingame/resourcesLoaded\");\nexport const refreshPage = createAction(\"ingame/refresh\");\nexport const secondElapsed = createAction(\"ingame/secondElapsed\");\n\ninterface WithContext\n{\n    context: GeneralContext\n}\n\nexport function getContextUpdated(msg: WithContext)\n{\n    return contextUpdated(msg.context);\n}\n","import {Reducer, AnyAction} from \"redux\"\nimport {overviewLoaded, registerRequest, loginSucceeded, loginRequest, registerSuccessful, contextUpdated, buildingsLoaded, resourcesLoaded, dependencyTreeLoaded, secondElapsed} from \"./Actions\"\nimport {Store, LoginState, RegisterState, DEFAULT_STORE_STATE, getLoginPageState, getLoginFormState, OVERVIEW_PAGE, INGAME_PAGE, getIngamePageState, getChosenPlanet, BUILDINGS_PAGE, getEmptyContextWithChosen, RESOURCES_PAGE, DEPENDENCY_TREE_PAGE, getBuildingQueue} from \"./Store\";\n\n//type LoginFormAction = LoginSubmitAction | RegisterSubmitAction | LoginSuccessfulAction | RegisterSuccessfulAction;\n\nfunction reduceIfInitialized(queue: ReturnType<typeof getBuildingQueue>)\n{\n  if(queue)\n  {\n    return {\n      ...queue,\n      timeToFinish: queue.timeToFinish - 1,\n    }\n  }\n  return queue;\n}\n\n\nfunction reduceSecond(state: Store)\n{\n  if(state.page.type === INGAME_PAGE)\n  {\n    if(state.page.innerPage.type === BUILDINGS_PAGE)\n    {\n      return {\n        ...state,\n        page : {\n          ...getIngamePageState(state),\n          innerPage: {\n            ...getIngamePageState(state).innerPage,\n            queue: reduceIfInitialized(getBuildingQueue(state))\n          }\n        }\n      }\n    }\n  }\n  return state;\n}\n\nconst myReducer : Reducer<Store, AnyAction> = (state = DEFAULT_STORE_STATE, action) => {\n\n\n  if(loginRequest.match(action))\n    return {\n      ...state,\n      page : {\n        ...getLoginPageState(state),\n        loginForm: {\n          ...getLoginFormState(state),\n          loginState: LoginState.requested\n        }\n      }\n    }\n  else if(loginSucceeded.match(action))\n    return {\n      ...state,\n      page : {\n        type: INGAME_PAGE,\n        innerPage : {\n          type: OVERVIEW_PAGE\n        },\n        contextData: getEmptyContextWithChosen(action.payload.chosenPlanet)\n      }\n    }\n  else if(overviewLoaded.match(action))\n  {\n    return {\n      ...state,\n      page : {\n        ...getIngamePageState(state),\n        innerPage : {\n          type: OVERVIEW_PAGE\n        },\n      }\n    }\n  }\n  else if(registerRequest.match(action))\n    return {\n      page : {\n        ...getLoginPageState(state),\n        loginForm : {\n          ...getLoginFormState(state),\n          registerState: RegisterState.requested\n        }\n      }\n    }\n  else if(registerSuccessful.match(action))\n    return {\n      ...state,\n      page : {\n        ...getLoginPageState(state),\n        loginForm : {\n          ...getLoginFormState(state),\n          registerState: RegisterState.successful\n        }\n      }\n    }\n  else if(contextUpdated.match(action))\n    return {\n      ...state,\n      page : {\n        ...getIngamePageState(state),\n        contextData: {\n          actualPlanetStorage: action.payload.storage,\n          planetList: action.payload.planetList,\n          chosenPlanet: getChosenPlanet(state),\n          buildings: action.payload.buildings,\n          researchs: action.payload.researchs\n        }\n      }\n    }\n  else if(buildingsLoaded.match(action))\n    return {\n      ...state,\n      page : {\n        ...getIngamePageState(state),\n        innerPage: {\n          type: BUILDINGS_PAGE,\n          queue: action.payload.queue\n        }\n      }\n    }\n  else if(resourcesLoaded.match(action))\n    return {\n      ...state,\n      page : {\n        ...getIngamePageState(state),\n        innerPage : {\n          type: RESOURCES_PAGE,\n          production: action.payload\n        }\n      }\n    }\n  else if(dependencyTreeLoaded.match(action))\n    return {\n      ...state,\n      page : {\n        ...getIngamePageState(state),\n        innerPage : {\n          type: DEPENDENCY_TREE_PAGE\n        }\n      }\n    }\n  else if(secondElapsed.match(action))\n  {\n    return reduceSecond(state);\n  }\n  else\n    return state\n}\n\nexport const combinedReducer = myReducer;","import React from 'react'\nimport {connect} from 'react-redux'\nimport {loginRequest, registerRequest} from \"./Actions\"\nimport {LoginFormState, LoginState, RegisterState, getLoginFormState, DEFAULT_LOGIN_FIELDS} from \"./Store\"\nimport {UserCredentials } from \"./generated/AllGenerated\"\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    onLoginClick: (fields: UserCredentials) => dispatch(loginRequest(fields)),\n    onRegisterClick: (fields: UserCredentials) => dispatch(registerRequest(fields))\n})\n\ntype LoginFormProps = LoginFormState & ReturnType<typeof mapDispatchToProps>;\n\nclass LoginForm extends React.Component<LoginFormProps, never>\n{\n    constructor(props: LoginFormProps) \n    {\n        super(props)\n        this.fields = DEFAULT_LOGIN_FIELDS;\n    }\n    render()\n    {\n        return <div>\n            <input type=\"text\" name=\"login-input\" onChange={this.setLogin.bind(this)}/>\n            <input type=\"password\" name=\"passcode-input\" onChange={this.setPasscode.bind(this)}/>\n            <input type=\"submit\" value=\"Login\" disabled={this.props.loginState === LoginState.requested} onClick={this.loginClick.bind(this)}/>\n            <input type=\"submit\" value=\"Register\" disabled={this.props.registerState === RegisterState.requested} onClick={this.registerClick.bind(this)}/>\n        </div>\n    }\n    private setLogin(event: any)\n    {\n        this.fields.login = event.target.value;\n    }\n    private setPasscode(event: any)\n    {\n        this.fields.passcode = event.target.value;\n    }\n    private loginClick()\n    {\n        this.props.onLoginClick(this.fields);\n    }\n    private registerClick()\n    {\n        this.props.onRegisterClick(this.fields);\n    }\n    fields: UserCredentials\n}\n\n\nexport default connect(getLoginFormState, mapDispatchToProps)(LoginForm);","import React from 'react';\nimport LoginForm from \"./LoginForm\"\n\nclass Login extends React.Component<any, any>{\n  render() \n  {\n    return(\n      <>\n        <LoginForm />\n      </>)\n  }\n}\n\nexport default Login;\n","import React from 'react';\nimport {connect } from \"react-redux\"\nimport { loadBuildingsPage, loadDependencyTreePage, loadOverviewPage, loadResourcesPage } from './Actions';\nimport { PlanetLocation } from \"./generated/AllGenerated\"\nimport { getChosenPlanet, Store } from './Store';\n\nconst mapDispatchToProps = (dispatch: any) => (\n{\n  onOverviewClick: (planet: PlanetLocation) => dispatch(loadOverviewPage({planet: planet})),\n  onBuildingsClick: (planet: PlanetLocation) => dispatch(loadBuildingsPage({planet: planet})),\n  onResourcesClick: (planet: PlanetLocation) => dispatch(loadResourcesPage({planet: planet})),\n  onDependencyTreeClick: (planet: PlanetLocation) => dispatch(loadDependencyTreePage({planet: planet}))\n})\n\nconst mapStateToProps = (state: Store) =>\n  ({\n    planet: getChosenPlanet(state)\n  })\n\ntype MenuProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nclass Menu extends React.Component<MenuProps, never>{\n  render() \n  {\n    return(\n      <>\n        <button className=\"link-button\" onClick={this.onOverviewClick} id=\"goToOverviewButton\">Overview</button><br/>\n        <button className=\"link-button\" onClick={this.onBuildingsClick} id=\"goToBuildingsButton\">Buildings</button><br/>\n        <button className=\"link-button\" onClick={this.onResourcesClick} id=\"goToResourcesButton\">Resources</button><br/>\n        <button className=\"link-button\" onClick={this.onDependencyTreeClick} id=\"goToDependencyTreeButton\">Dependency Tree</button><br/>\n      </>)\n  }\n  onOverviewClick = () => this.props.onOverviewClick(this.props.planet);\n  onBuildingsClick = () => this.props.onBuildingsClick(this.props.planet);\n  onResourcesClick = () => this.props.onResourcesClick(this.props.planet);\n  onDependencyTreeClick = () => this.props.onDependencyTreeClick(this.props.planet);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu)\n","import React from 'react';\nimport {connect} from 'react-redux'\nimport {getActualPlanetStorage, Store} from \"./Store\"\n\nconst mapStateToProps = (state: Store) => ({\n    \"resources\": getActualPlanetStorage(state)\n})\n\nclass ResourcesView extends React.Component<ReturnType<typeof mapStateToProps>, any>{\n  render() \n  {\n    return(\n      <>\n      <p>metal: <span id=\"resources_amount_metal\">{this.props.resources.metal}</span></p>\n      <p>crystal: <span id=\"resources_amount_crystal\">{this.props.resources.crystal}</span></p>\n      <p>deuter: <span id=\"resources_amount_deuter\">{this.props.resources.deuter}</span></p>\n      </>)\n  }\n}\n\nexport default connect(mapStateToProps)(ResourcesView);\n","import { Requirements,\n         Buildings,\n         Researchs } from \"./generated/AllGenerated\"\n\nexport function getKeys<T>(obj: T) : (keyof T)[]\n{\n    return Object.keys(obj).map((key)=>key as keyof T);\n}\n\nexport function prettyName(camelCase: string) : string\n{\n    const camelCaseName = camelCase[0].toUpperCase() + camelCase.substring(1);\n    return camelCaseName.match(/[A-Z][^A-Z]*/g)?.join(\" \")!;\n}\n\nexport function findRequirements<T>(entity: T, requirementList: {name: T, requirements: Requirements}[]) : Requirements\n{\n    return requirementList.find((req)=>req.name === entity)!.requirements;\n}\n\nexport function isSatisfied(requirements: Requirements, buildings: Buildings, researchs: Researchs)\n{\n    return requirements.buildings.every((req) => buildings[req.name] >= req.level)\n           &&\n           requirements.researchs.every((req) => researchs[req.name] >= req.level);\n}","import rawKnowledge from \"./Knowledge.json\"\nimport {Knowledge} from \"./generated/AllGenerated\"\nconst knowledge : Knowledge = rawKnowledge as Knowledge;\nexport default knowledge;","import React from \"react\"\nimport {connect} from \"react-redux\"\nimport { Building } from \"./generated/AllGenerated\"\nimport {startBuilding} from \"./Actions\"\nimport { Store, getBuildingQueue } from \"./Store\"\nimport knowledge from \"./Knowledge\"\nimport {prettyName} from \"./Utility\"\n\ntype PropsFromParent =\n{\n    buildingName: Building\n    level: number\n}\n\ntype CalculatedCost =\n{\n    metal: number\n    crystal: number\n    deuter: number\n    energy: number | null\n}\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    onBuildClick: (building: Building) => dispatch(startBuilding({building: building}))\n})\n\nconst mapStateToProps = (state: Store) => ({\n    queue: getBuildingQueue(state)\n})\n\ntype TimeLeft = {\n    hours : number,\n    minutes : number,\n    seconds : number\n}\n\nfunction secondsToTimeLeft(rawSeconds: number) : TimeLeft\n{\n    const seconds = rawSeconds % 60;\n    const minutes = (rawSeconds - seconds) / 60;\n    const hours = (rawSeconds - minutes * 60 - seconds) / 3600;\n    return {\n        hours : hours,\n        minutes : minutes,\n        seconds : seconds\n    }\n}\n\nfunction fillZeros(num: number) : string\n{\n    if(num < 10)\n    {\n        return \"0\" + num;\n    }\n    return \"\" + num;\n}\n\nfunction formatTimeLeft(timeLeft : TimeLeft) : string\n{\n    return fillZeros(timeLeft.hours)\n         + \":\"\n         + fillZeros(timeLeft.minutes)\n         + \":\"\n         + fillZeros(timeLeft.seconds);\n}\n\n\nfunction calculateCost(name: Building, level: number) : CalculatedCost\n{\n    function calc(init: number, multiplier: number, level: number) : number\n    {\n        return Math.floor(init * Math.pow(multiplier, level));\n    }\n    const know = knowledge.buildingCosts.find((elem)=>elem.name === name)!.cost;\n    return {\n        metal: calc(know.metal, know.multiplier, level),\n        crystal: calc(know.crystal, know.multiplier, level),\n        deuter: calc(know.deuter, know.multiplier, level),\n        energy: know.energy > 0.1 ? calc(know.energy, know.multiplier, level) : null\n    }\n}\n\n\nclass BuildingEntry extends React.Component<PropsFromParent & ReturnType<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>,never>\n{\n    render() {\n        return <tr>\n            <th align=\"left\">{this.buildingInfo()}</th>\n            <th>{this.getBuildButtonField()}</th>\n        </tr>\n    }\n\n    buildingInfo() {\n        const cost = calculateCost(this.props.buildingName, this.props.level);\n        return <>\n            <span className=\"building-name\">{this.prettyName()}</span> (Level <span>{this.props.level}</span>)<br/>\n            Cost: \n            {cost.metal > 0 ? <>Metal: <span>{cost.metal}</span> </> : null} \n            {cost.crystal > 0 ? <>Crystal: <span>{cost.crystal}</span> </> : null} \n            {cost.deuter > 0 ? <>Deuter: <span>{cost.deuter}</span> </> : null} \n            {cost.energy ? <>Energy: <span>{cost.energy}</span></> : <></>}\n        </>\n    }\n\n    startBuilding()\n    {\n        this.props.onBuildClick(this.props.buildingName);\n    }\n    \n    getBuildButtonField()\n    {\n        return this.props.queue ? this.getBuildTimer() : this.getBuildButton();\n    }\n    \n    getBuildTimer()\n    {\n        if(this.props.queue?.building! === this.props.buildingName)\n        {\n            return <div><span id=\"timeToFinishBuilding\">{formatTimeLeft(secondsToTimeLeft(this.props.queue?.timeToFinish!))}</span></div>\n        }\n        else\n        {\n            return null\n        }\n    }\n\n    getBuildButton()\n    {\n        return <button className=\"link-button\" id={\"build_\" + this.props.buildingName} onClick={this.startBuilding.bind(this)}>Build to level {this.level() + 1}</button>;\n    }\n\n    level()\n    {\n        return this.props.level\n    }\n\n    name()\n    {\n        return this.props.buildingName;\n    }\n\n    prettyName()\n    {\n        return prettyName(this.props.buildingName);\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BuildingEntry);","import React from \"react\"\nimport {connect} from \"react-redux\"\nimport { getResearchs, Store } from \"./Store\"\nimport { getBuildings } from \"./Store\"\nimport { Buildings,\n         Building } from \"./generated/AllGenerated\"\nimport {getKeys, isSatisfied, findRequirements} from \"./Utility\"\nimport BuildingEntry from \"./BuildingEntry\"\nimport knowledge from \"./Knowledge\"\n\n\nfunction mapStateToProps(state: Store) \n{\n    return {\n        buildings: getBuildings(state),\n        researchs: getResearchs(state)\n    }\n}\n\nconst buildingsOrder : Buildings = {\n    metalMine:       1,\n    crystalMine:     2,\n    deuteriumSynthesizer: 3,\n    solarPlant:  4,\n    fusionReactor:   5,\n    roboticsFactory:          6,\n    naniteFactory:         7,\n    shipyard:        8,\n    metalStorage:    9,\n    crystalStorage:  10,\n    deuteriumTank:   11,\n    researchLab:     12,\n    terraformer:     13,\n    alianceDepot:    14,\n    missileSilo:     15\n};\n\nfunction buildingsOrderPred(lhs: Building, rhs: Building) : number\n{\n    return buildingsOrder[lhs] - buildingsOrder[rhs];\n}\n\ntype BuildingsPageProps = ReturnType<typeof mapStateToProps>;\n\nclass BuildingsPage extends React.Component<BuildingsPageProps, never>\n{\n    render(){\n        console.log(\"rendering BuildingsPage\")\n        return <div>\n            <table className=\"entity-list\">\n            {getKeys(this.props.buildings).sort(buildingsOrderPred)\n                                          .filter(this.areRequirementsSatisfied.bind(this))\n                                          .map(this.getBuildingEntry.bind(this))}\n            </table>\n        </div>\n    }\n\n    getBuildingEntry(buildingName: Building)\n    {\n        return <BuildingEntry buildingName={buildingName} level={this.props.buildings[buildingName]}/>;\n    }\n\n    areRequirementsSatisfied(buildingName: Building) : Boolean\n    {\n        return isSatisfied(findRequirements(buildingName, knowledge.requirements.buildings),\n                           this.props.buildings,\n                           this.props.researchs);\n    }\n}\n\nexport default connect(mapStateToProps)(BuildingsPage)\n\n","import React from \"react\"\nimport {Building, \n        ProductionPercentages} from \"./generated/AllGenerated\"\nimport { Store, getTotalProduction, getBuildings } from \"./Store\"\nimport {connect} from \"react-redux\"\nimport knowledge from \"./Knowledge\"\nimport {prettyName} from \"./Utility\"\n\ntype Production =\n{\n    ideal: number,\n    actual: number\n}\n\nconst EMPTY_PROD : Production = {ideal: -1, actual: -1}\n\nfunction alwaysIdeal(prod: number) : Production\n{\n    return {\n        ideal: prod,\n        actual: prod\n    }\n}\n\nfunction makeProd(actual: number, ideal: number)\n{\n    return {\n        ideal: ideal,\n        actual: actual\n    }\n}\n\ntype ProductionEntryResources =\n{\n    metal: Production,\n    crystal: Production,\n    deuter: Production,\n    energy: Production \n}\n\ntype ProductionBuilding = Extract<Building, keyof ProductionPercentages>;\n\ntype ProductionEntryData = \n{\n    name: ProductionBuilding \n    level: number\n    percentage: number\n} & Partial<ProductionEntryResources>\n\nfunction mapStateToProps(state: Store) \n{\n    return {\n        ...getTotalProduction(state),\n        buildings: getBuildings(state)\n    }\n}\n\nclass ProductionEntry extends React.Component<ProductionEntryData,{}>\n{\n    static defaultProps : ProductionEntryResources = {\n        metal: EMPTY_PROD,\n        crystal: EMPTY_PROD,\n        deuter: EMPTY_PROD,\n        energy: EMPTY_PROD\n    };\n    render()\n    {\n        return (<tr>\n            <th>{prettyName(this.props.name)} (Level {this.props.level})</th>\n            <th>{this.formatProduction(this.props.metal!)}</th>\n            <th>{this.formatProduction(this.props.crystal!)}</th>\n            <th>{this.formatProduction(this.props.deuter!)}</th>\n            <th>{this.formatProduction(this.props.energy!)}</th>\n            <th>{this.props.percentage}%</th>\n        </tr>)\n    }\n    formatProduction(prod: Production)\n    {\n        //return <>{prod < 0 ? \"-\" : Math.floor(prod)}</>\n        if(prod.ideal === prod.actual)\n        {\n            if(prod.actual === -1)\n            {\n                return <>-</>\n            }\n            return <>{prod.actual}</>\n        }\n        return <>{prod.actual}<br/>({prod.ideal})</>\n    }\n}\n\n\nclass ResourcesPage extends React.Component<ReturnType<typeof mapStateToProps>,never>\n{\n    render()\n    {\n        const prod = this.props.production;\n        return <table>\n            <tr>\n                <th></th>\n                <th>Metal</th>\n                <th>Crystal</th>\n                <th>Deuter</th>\n                <th>Energy</th>\n                <th>Percentage</th>\n            </tr>\n            <tr>\n                <th>Base Production</th>\n                <th>{knowledge.productions.baseMetal}</th>\n                <th>{knowledge.productions.baseCrystal}</th>\n                <th>-</th>\n                <th>-</th>\n                <th></th>\n            </tr>\n                             \n            {this.props.buildings.metalMine > 0 ?\n             <ProductionEntry name=\"metalMine\"\n                              level={this.props.buildings.metalMine}\n                              percentage={this.props.percentages.metalMine}\n                              metal={makeProd(prod.metalMineGeneration, prod.metalMineIdealGeneration)}\n                              energy={alwaysIdeal(-prod.metalMineEnergyUsage)}></ProductionEntry>\n             : null}\n            {this.props.buildings.crystalMine > 0 ?\n             <ProductionEntry name=\"crystalMine\"\n                              level={this.props.buildings.crystalMine}\n                              percentage={this.props.percentages.crystalMine}\n                              crystal={makeProd(prod.crystalMineGeneration, prod.crystalMineIdealGeneration)}\n                              energy={alwaysIdeal(-prod.crystalMineEnergyUsage)}></ProductionEntry>\n             : null}\n            {this.props.buildings.deuteriumSynthesizer > 0 ?\n             <ProductionEntry name=\"deuteriumSynthesizer\"\n                              level={this.props.buildings.deuteriumSynthesizer}\n                              percentage={this.props.percentages.deuteriumSynthesizer}\n                              deuter={makeProd(prod.deuteriumSynthesizerGeneration, prod.deuteriumSynthesizerIdealGeneration)}\n                              energy={alwaysIdeal(-prod.deuteriumSynthesizerEnergyUsage)}></ProductionEntry>\n             : null}\n            {this.props.buildings.solarPlant > 0 ?\n             <ProductionEntry name=\"solarPlant\"\n                              level={this.props.buildings.solarPlant}\n                              percentage={this.props.percentages.solarPlant}\n                              energy={alwaysIdeal(prod.solarPlantGeneration)}></ProductionEntry>\n             : null}\n\n             <tr>\n                 <th>Total</th>\n                 <th>{this.props.production.metalMineGeneration + knowledge.productions.baseMetal}</th>\n                 <th>{this.props.production.crystalMineGeneration + knowledge.productions.baseCrystal}</th>\n                 <th>{this.props.production.deuteriumSynthesizerGeneration - this.props.production.fusionReactorDeuterUsage}</th>\n                 <th>{this.props.production.solarPlantGeneration\n                      + this.props.production.solarSateliteGeneration\n                      + this.props.production.fusionReactorGeneration\n                      - this.props.production.metalMineEnergyUsage\n                      - this.props.production.crystalMineEnergyUsage\n                      - this.props.production.deuteriumSynthesizerEnergyUsage}</th>\n                 <th></th>\n             </tr>\n        </table>\n    }\n}\n\nexport default connect(mapStateToProps)(ResourcesPage);","import React from \"react\"\nimport {connect} from \"react-redux\"\nimport {getBuildings, getResearchs, Store } from \"./Store\"\nimport { RequirementsForBuilding,\n         RequirementsForResearch,\n         BuildingRequirement,\n         ResearchRequirement} from \"./generated/AllGenerated\"\nimport knowledge from \"./Knowledge\"\nimport {prettyName} from \"./Utility\"\n\n\nfunction mapStateToProps(state: Store)\n{\n    return {\n        buildings : getBuildings(state),\n        researchs : getResearchs(state)\n    }\n}\n\ntype DependencyTreePageProps = ReturnType<typeof mapStateToProps>\n\nfunction renderRequirement(req: RequirementsForBuilding | RequirementsForResearch)\n{\n    const renderSingleReq = (r: BuildingRequirement | ResearchRequirement) => {\n        return <div>{prettyName(r.name)}(Level {r.level})</div>\n    }\n\n    return <><div className={\"entity-entry\"}>\n        {prettyName(req.name)}\n    </div>\n    <div className={\"entity-entry\"}>\n        {req.requirements.buildings.map(renderSingleReq)}\n        {req.requirements.researchs.map(renderSingleReq)}\n    </div></>\n}\n\nclass DependencyTreePage extends React.Component<DependencyTreePageProps, never>\n{\n    render()\n    {\n        /*return <table className=\"entity-list\">\n            {knowledge.requirements.buildings.map(renderRequirement)}\n        </table>*/\n\n        return <div className=\"requirements-list\">\n            {knowledge.requirements.buildings.map(renderRequirement)}\n        </div>\n    }\n}\n\nexport default connect(mapStateToProps)(DependencyTreePage);","import React from \"react\"\nimport {connect} from \"react-redux\"\nimport {Store, OVERVIEW_PAGE, BUILDINGS_PAGE, getIngamePageState, RESOURCES_PAGE, DEPENDENCY_TREE_PAGE} from \"./Store\"\nimport BuildingsPage from \"./BuildingsPage\"\nimport ResourcesPage from \"./ResourcesPage\"\nimport DependencyTreePage from \"./DependencyTreePage\"\n\ntype IngameSwitchPageProps = {\n    pageType: string\n}\n\nconst mapStateToProps = (state: Store) => ({\n    pageType: getIngamePageState(state).innerPage.type\n})\n\nclass IngameSwitch extends React.Component<IngameSwitchPageProps, never>{\n  render() \n  {\n    console.log(this.props.pageType)\n      switch(this.props.pageType)\n      {\n          case OVERVIEW_PAGE:\n              return <div>overview</div>\n          case BUILDINGS_PAGE:\n              return <BuildingsPage />\n          case RESOURCES_PAGE:\n              return <ResourcesPage />\n          case DEPENDENCY_TREE_PAGE:\n              return <DependencyTreePage />\n          default:\n              return <div>none</div>\n      }\n  }\n}\n\nexport default connect(mapStateToProps)(IngameSwitch)","import React from 'react';\nimport Menu from \"./Menu\"\nimport ResourcesView from \"./ResourcesView\"\nimport IngameSwitch from \"./IngameSwitch\"\n\nclass Ingame extends React.Component<any, any>{\n  render() \n  {\n    return (\n        <div className=\"ingame\">\n          <div><Menu /></div>\n          <div><ResourcesView />\n               <IngameSwitch /></div>\n        </div>);\n  }\n}\n\nexport default Ingame;\n","import Login from \"./Login\"\nimport Ingame from \"./Ingame\"\nimport React from \"react\"\nimport {LOGIN_PAGE, INGAME_PAGE, Store} from \"./Store\"\nimport { connect } from \"react-redux\"\n\ntype PageProps = {\n    actualPage: typeof LOGIN_PAGE | typeof INGAME_PAGE\n};\n\nfunction mapStateToProps(store: Store) : PageProps\n{\n    return {\n        actualPage: store.page.type\n    }\n}\n\nclass Page extends React.Component<PageProps, never>{\n  render() \n  {\n      switch(this.props.actualPage)\n      {\n          case LOGIN_PAGE:\n              return <Login/>\n          case INGAME_PAGE:\n              return <Ingame/>\n      }\n  }\n}\n\nexport default connect(mapStateToProps)(Page)","import {OnPlanetQuery,\r\n        OnPlanetAction,\r\n        PlayerId,\r\n        PlanetLocation,\r\n        OnPlanetRequest,\r\n        STORAGE_REQUEST,\r\n        BUILDINGS_LIST_REQUEST} from \"./generated/AllGenerated\"\r\n\r\n\r\nexport class OnPlanetRequestBuilder\r\n{\r\n    constructor(player: PlayerId, planet: PlanetLocation, action: OnPlanetAction | null = null)\r\n    {\r\n        this.msg = {\r\n            playerId : player,\r\n            planet : planet,\r\n            action : action,\r\n            queries : []\r\n        }\r\n    }\r\n    \r\n\r\n    addQuery(query: OnPlanetQuery) : OnPlanetRequestBuilder\r\n    {\r\n        this.msg.queries.push(query)\r\n        return this;\r\n    }\r\n\r\n    addContext() : OnPlanetRequestBuilder\r\n    {\r\n        this.msg.queries.push({type: STORAGE_REQUEST, data: {}});\r\n        this.msg.queries.push({type: BUILDINGS_LIST_REQUEST, data: {}});\r\n        return this;\r\n    }\r\n\r\n    msg: OnPlanetRequest\r\n}","import { OnPlanetRequestBuilder } from \"./OnPlanetRequestBuilder\"\nimport {IRouter} from \"./IRouter\"\nimport { BUILDINGS_LIST_RESPONSE,\n         BUILDING_QUEUE_RESPONSE,\n         BUILD_REQUEST,\n         STORAGE_RESPONSE,\n         BUILDING_QUEUE_REQUEST,\n         PRODUCTION_PERCENTAGES_REQUEST,\n         PRODUCTION_INFORMATION_REQUEST,\n         PRODUCTION_PERCENTAGES_RESPONSE,\n         PRODUCTION_INFORMATION_RESPONSE,\n         ProductionPercentagesResponse,\n         ProductionInformationResponse,\n         ProductionInformationViewRequest,\n         ProductionInformationViewResponse,\n         BuildingsViewRequest,\n         BuildingsViewResponse,\n         OnPlanetResponseData,\n        StorageResponse,\n         BuildingsListResponse,\n         BuildingQueueResponse,\n         RefreshContextRequest,\n         RefreshContextResponse,\n        StartBuildingActionRequest,\n        StartBuildingActionResponse,\n        PlayerId,\n        OverviewViewRequest,\n        PlanetLocation,\n        Researchs,\n        GeneralContext,\n        OverviewViewResponse } from \"./generated/AllGenerated\"\n\n\nfunction pick<T>(typename: string)\n{\n\treturn function(resp: OnPlanetResponseData) : T{\n\t\tconst elem = resp.find((elem) => elem.type === typename);\n\t\tif(elem === undefined)\n\t\t{\n\t\t\tthrow new Error(\"no elo\");\n\t\t}\n\t\treturn elem.data! as unknown as T;\n\t}\n}\n\nconst NO_RESEARCHS : Researchs =\n{\n    energyTechnology: 0,\n    computerTechnology: 0,\n    espionageTechnology: 0,\n    laserTechnology: 0,\n    hyperspaceDrive: 0,\n    hyperspaceTechnology: 0,\n    ionTechnology: 0,\n    intergalacticResearchNetwork: 0,\n    armourTechnology: 0,\n    shieldingTechnology: 0,\n    combustionDrive: 0,\n    impulseDrive: 0,\n    gravitonTechnology: 0,\n    weaponsTechnology: 0,\n    plasmaTechnology: 0\n}\n\nfunction pickContext(resp: OnPlanetResponseData, planet: PlanetLocation) : GeneralContext\n{\n    return {\n        storage: pick<StorageResponse>(STORAGE_RESPONSE)(resp).storage,\n        buildings: pick<BuildingsListResponse>(BUILDINGS_LIST_RESPONSE)(resp).buildings,\n        researchs: NO_RESEARCHS,\n        planetList: [planet]\n    }\n}\n\nexport class RouterMiddleware\n{\n    constructor(backend: IRouter)\n    {\n        this.backend = backend;\n    }\n\n    async buildingsView(playerId: PlayerId, req: BuildingsViewRequest) : Promise<BuildingsViewResponse>\n    {\n        const onPlanet = new OnPlanetRequestBuilder(playerId, req.planet)\n                       .addContext()\n                       .addQuery({type: BUILDING_QUEUE_REQUEST, data:{}}).msg\n        \n        const resp = await this.backend.onPlanetRequest(onPlanet);\n\n        return {\n            context: pickContext(resp, req.planet),\n            buildingQueue: pick<BuildingQueueResponse>(BUILDING_QUEUE_RESPONSE)(resp)\n        }\n    }\n\n    async startBuilding(playerId: PlayerId, req: StartBuildingActionRequest) : Promise<StartBuildingActionResponse>\n    {\n        const onPlanet = new OnPlanetRequestBuilder(playerId, req.planet, {type: BUILD_REQUEST, data: {buildingName: req.building}})\n                       .addContext()\n                       .addQuery({type: BUILDING_QUEUE_REQUEST, data:{}}).msg\n        const resp = await this.backend.onPlanetRequest(onPlanet);\n        return {\n            response: {\n                context: pickContext(resp, req.planet),\n                buildingQueue: pick<BuildingQueueResponse>(BUILDING_QUEUE_RESPONSE)(resp)\n            },\n            status: \"ok\"\n        }\n    }\n    async overview(playerId: PlayerId, req: OverviewViewRequest) : Promise<OverviewViewResponse>\n    {\n        const onPlanet = new OnPlanetRequestBuilder(playerId, req.planet).addContext().msg;\n        const resp = await this.backend.onPlanetRequest(onPlanet);\n\t\treturn {\n\t\t\tcontext: pickContext(resp, req.planet)\n\t\t}\n    }\n    async queryProduction(playerId: PlayerId, req: ProductionInformationViewRequest) : Promise<ProductionInformationViewResponse>\n    {\n        const onPlanet = new OnPlanetRequestBuilder(playerId, req.planet)\n                        .addContext()\n                        .addQuery({type: PRODUCTION_INFORMATION_REQUEST, data:{}})\n                        .addQuery({type: PRODUCTION_PERCENTAGES_REQUEST, data:{}}).msg;\n\n        const resp = await this.backend.onPlanetRequest(onPlanet);\n\n        return {\n            context: pickContext(resp, req.planet),\n            productionInformation: {\n                percentages: pick<ProductionPercentagesResponse>(PRODUCTION_PERCENTAGES_RESPONSE)(resp).percentages,\n                production: pick<ProductionInformationResponse>(PRODUCTION_INFORMATION_RESPONSE)(resp).production\n            }\n        }\n    }\n    async refreshContext(playerId: PlayerId, req: RefreshContextRequest) : Promise<RefreshContextResponse>\n    {\n        const onPlanet = new OnPlanetRequestBuilder(playerId, req.planet).addContext().msg;\n        const resp = await this.backend.onPlanetRequest(onPlanet);\n\n        return {\n            context: pickContext(resp, req.planet),\n        }\n    }\n    backend: IRouter\n}","import {RouterMiddleware} from \"./RouterMiddleware\"\nimport IRouterConnectivity from \"./IRouterConnectivity\"\nimport { PlanetLocation,\n         OverviewViewResponse,\n         OverviewViewRequest,\n         BuildingsViewRequest,\n         BuildingsViewResponse,\n         StartBuildingActionRequest,\n         StartBuildingActionResponse,\n         GeneralRequestData,\n         GeneralResponseData,\n         OnPlanetResponseData,\n         OnPlanetRequest,\n         LoginResponse,\n         RefreshContextResponse,\n         RefreshContextRequest,\n         SerializableRequest,\n         SerializableResponse,\n         RegisterResponse,\n         UserCredentials,\n         GENERAL_REQUEST,\n         LOGIN_REQUEST,\n         LOGIN_RESPONSE,\n         PlayerId,\n         Building,\n         REGISTER_REQUEST,\n         ProductionInformationViewResponse,\n         ProductionInformationViewRequest,\n         ON_PLANET_REQUEST} from \"./generated/AllGenerated\"\n\ntype GeneralRequestDataKey = GeneralRequestData[\"type\"];\ntype GeneralRequestDataData = GeneralRequestData[\"data\"];\n\nfunction asGeneralRequest(payload: GeneralRequestDataData, type: GeneralRequestDataKey) : GeneralRequestData\n{\n    return {\n        type: type,\n        data: payload\n    };\n}\n\ninterface WasmModule\n{\n    _malloc(ptr: number) : number\n    _free(ptr: number) : void\n    processRequest(str: number) : number\n    forwardTime(duration: number) : void\n    clearDb() : void\n    writeAsciiToMemory(str: string, mem: number) : void\n    FileSystem : any\n    AsciiToString(mem: number) : string\n}\n\ndeclare function makeBackend() : Promise<WasmModule>\n\ndeclare global\n{\n    interface Window {\n        __forwardTime : (duration: number)=>void\n        __clearDb : ()=>void\n    }\n}\n\nclass WasmBackend\n{\n    constructor()\n    {\n        this.module = makeBackend()\n        this.module.then((module)=>{\n            window.__forwardTime = (duration: number)=>module.forwardTime(duration);\n            window.__clearDb = ()=>module.clearDb();\n        })\n    }\n    async generalRequest(request: GeneralRequestData) : Promise<GeneralResponseData>\n    {\n        const result = await this.processRequest({request: {\n            data: {\n                request: request\n            },\n            type: GENERAL_REQUEST\n        },\n        transactionId : 0\n        });\n        return result.response.data.response as GeneralResponseData;\n    }\n    async onPlanetRequest(request: OnPlanetRequest) : Promise<OnPlanetResponseData>\n    {\n        const result = await this.processRequest({\n            request: {\n                data: request,\n                type: ON_PLANET_REQUEST\n            },\n            transactionId : 0\n        });\n        return result.response.data.response as OnPlanetResponseData;\n    }\n    async processRequest(request: SerializableRequest) : Promise<SerializableResponse>\n    {\n        const module = await this.module;\n        const inputStr = JSON.stringify(request);\n        const inputMem = module._malloc(inputStr.length + 1);\n        module.writeAsciiToMemory(inputStr, inputMem);\n        const outputMem = module.processRequest(inputMem);\n        const outputStr = module.AsciiToString(outputMem);\n        module._free(outputMem);\n        await new Promise<void>(function(resolve){\n            module.FileSystem.syncfs(false, function(err: any){\n                console.log(err);\n                resolve();\n            })\n        });\n        return JSON.parse(outputStr) as SerializableResponse;\n    }\n    module: Promise<WasmModule>\n}\n\nconst backend = new WasmBackend();\nconst middleware = new RouterMiddleware(backend);\n\nexport default class RouterConnectivity implements IRouterConnectivity\n{\n    async tryLogin(credentials: UserCredentials) : Promise<LoginResponse>\n    {\n        const resp = await backend.generalRequest(asGeneralRequest({credentials: credentials}, LOGIN_REQUEST));\n        if(resp.type === LOGIN_RESPONSE)\n        {\n            this.playerId = resp.data.playerId;\n        }\n        return resp.data as LoginResponse;\n    }\n    async tryRegister(credentials: UserCredentials) : Promise<RegisterResponse>\n    {\n        const resp = await backend.generalRequest(asGeneralRequest({credentials: credentials}, REGISTER_REQUEST));\n        return resp.data as RegisterResponse;\n    }\n    loadOverviewPage(planet: PlanetLocation) : Promise<OverviewViewResponse>\n    {\n        return middleware.overview(this.playerId!, {planet: planet} as OverviewViewRequest);\n    }\n    loadBuildingsPage(planet: PlanetLocation) : Promise<BuildingsViewResponse>\n    {\n        return middleware.buildingsView(this.playerId!, {planet: planet} as BuildingsViewRequest);\n    }\n    beginBuilding(planet: PlanetLocation, building: Building) : Promise<StartBuildingActionResponse>\n    {\n        return middleware.startBuilding(this.playerId!, {planet: planet, building: building} as StartBuildingActionRequest);\n    }\n    loadResourcesPage(planet: PlanetLocation) : Promise<ProductionInformationViewResponse>\n    {\n        return middleware.queryProduction(this.playerId!, {planet: planet} as ProductionInformationViewRequest);\n    }\n    refreshContext(planet: PlanetLocation) : Promise<RefreshContextResponse>\n    {\n        return middleware.refreshContext(this.playerId!, {planet: planet} as RefreshContextRequest);\n    }\n    playerId : PlayerId | null = null;\n}\n\n","import {Middleware} from \"redux\"\nimport IRouterConnectivity from \"../IRouterConnectivity\"\nimport {resourcesLoaded, loadResourcesPage, loadOverviewPage, loadBuildingsPage, buildingsLoaded, overviewLoaded, startBuilding, getContextUpdated, loadDependencyTreePage, dependencyTreeLoaded, refreshPage, secondElapsed} from \"../Actions\"\nimport {DEPENDENCY_TREE_PAGE, getChosenPlanet, getIngamePageState, OVERVIEW_PAGE, RESOURCES_PAGE, BUILDINGS_PAGE, Store, shouldRefreshDueToDone} from \"../Store\"\nimport {GeneralContext,\n        BuildingsViewResponse,\n        PlanetLocation,\n        ProductionInformationViewResponse } from \"../generated/AllGenerated\"\n\n\nfunction chooseRefreshAction(store: Store, planet: PlanetLocation | null = null)\n{\n    if(planet === null)\n    {\n        planet = getChosenPlanet(store);\n    }\n    const payload = {planet: planet};\n    switch(getIngamePageState(store).innerPage.type)\n    {\n        case OVERVIEW_PAGE:\n            return loadOverviewPage(payload);\n        case BUILDINGS_PAGE:\n            return loadBuildingsPage(payload);\n        case RESOURCES_PAGE:\n            return loadResourcesPage(payload);\n        case DEPENDENCY_TREE_PAGE:\n            return loadDependencyTreePage(payload);\n    }\n}\n\nexport function getIngameMiddleware(conn: IRouterConnectivity) : Middleware\n{\n    return store => next => action => {\n        const {dispatch} = store;\n        const updateContext = (msg: {context: GeneralContext}) => dispatch(getContextUpdated(msg));\n        const updateBuildings = (msg: BuildingsViewResponse) => dispatch(buildingsLoaded({queue: msg.buildingQueue.queue}));\n        const updateResources = (msg: ProductionInformationViewResponse) => dispatch(resourcesLoaded(msg.productionInformation))\n        const getPlanet = () => getChosenPlanet(store.getState());\n        if(loadOverviewPage.match(action))\n        {\n            conn.loadOverviewPage(action.payload.planet).then(resp => {updateContext(resp);\n                                                                       dispatch(overviewLoaded());});\n        }\n        else if(loadBuildingsPage.match(action))\n        {\n            conn.loadBuildingsPage(getPlanet()).then(resp => {updateContext(resp);\n                                                              updateBuildings(resp);});\n        }\n        else if(startBuilding.match(action))\n        {\n            conn.beginBuilding(getPlanet(), action.payload.building).then(resp => {updateContext(resp.response);\n                                                                                   updateBuildings(resp.response)});\n        }\n        else if(loadResourcesPage.match(action))\n        {\n            conn.loadResourcesPage(getPlanet()).then(resp => {updateContext(resp);\n                                                              updateResources(resp);});\n\n        }\n        else if(loadDependencyTreePage.match(action))\n        {\n            conn.refreshContext(getPlanet()).then(resp => {updateContext(resp);\n                                                           dependencyTreeLoaded({})});\n        }\n        else if(refreshPage.match(action))\n        {\n            dispatch(chooseRefreshAction(store.getState()));\n        }\n        else if(secondElapsed.match(action))\n        {\n            if(shouldRefreshDueToDone(store.getState()))\n            {\n                dispatch(refreshPage());\n            }\n        }\n\n        next(action);\n    }\n\n}\n","import rawConfiguration from \"./Configuration.json\"\nimport {Configuration} from \"./generated/AllGenerated\"\nconst configuration : Configuration = rawConfiguration as Configuration;\nexport default configuration;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./index.scss\";\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux'\nimport { createStore, applyMiddleware} from 'redux';\nimport {combinedReducer} from \"./Reducers\"\nimport {DEFAULT_STORE_STATE} from \"./Store\"\nimport Page from \"./Page\"\nimport RouterConnectivity from \"./RouterConnectivity\"\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { getIngameMiddleware } from \"./middlewares/InGamePageProcedures\"\nimport { getLoginMiddleware } from \"./middlewares/LoginPageProcedures\"\nimport configuration from \"./Configuration\"\nimport {secondElapsed} from \"./Actions\"\n\nconst conn = new RouterConnectivity();\n\n\nconst store = createStore(combinedReducer, DEFAULT_STORE_STATE, composeWithDevTools(applyMiddleware(getIngameMiddleware(conn), getLoginMiddleware(conn))));\n\nif(configuration.realTime)\n{\n    window.setInterval(()=>{\n      store.dispatch(secondElapsed());\n    }, 1000);\n}\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <Provider store = {store}>\n      <div>elo</div>\n      <Page/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {Middleware} from \"redux\"\nimport IRouterConnectivity from \"../IRouterConnectivity\"\nimport {loadOverviewPage, loginRequest, registerRequest, registerSuccessful, loginSucceeded} from \"../Actions\"\n\nexport function getLoginMiddleware(conn: IRouterConnectivity) : Middleware\n{\n    return store => next => action => {\n        if(loginRequest.match(action))\n        {\n            conn.tryLogin(action.payload).then((resp)=>{\n                store.dispatch(loginSucceeded({chosenPlanet: resp.planets[0]}))});\n        }\n        else if(loginSucceeded.match(action))\n        {\n            store.dispatch(loadOverviewPage({planet: action.payload.chosenPlanet}));\n        }\n        else if(registerRequest.match(action))\n        {\n            conn.tryRegister(action.payload).then((resp) => store.dispatch(registerSuccessful()));\n        }\n        next(action);\n    }\n}\n"],"sourceRoot":""}